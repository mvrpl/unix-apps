name: Livechecks tap mvrpl/unix-apps

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  brew-livecheck:
    runs-on: ubuntu-latest
    outputs:
      json-apps: ${{ steps.brew-checkver.outputs.apps }}
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      - name: Livecheck brew
        id: brew-checkver
        run: |
          brew tap mvrpl/unix-apps https://github.com/mvrpl/unix-apps
          brew install jq
          echo "apps=$(brew livecheck --tap mvrpl/unix-apps --json | jq -c '.')" >> "$GITHUB_OUTPUT"
  updates:
    runs-on: ubuntu-latest
    needs: [brew-livecheck]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      - name: Updates Formulas
        env:
          APPS: ${{needs.brew-livecheck.outputs.json-apps}}
        run: |
          sudo apt-get install -y coreutils pcregrep
          brew install jq
          rm -f /tmp/.hashfailf
          touch /tmp/.hashfailf
          update_version () { if [ ! -f ./Formula/${1}.rb ];then return 0;fi;formula=$1;new_version=$2;old_version=$3;awk -v old="$old_version" -v new="$new_version" '{if ($0 ~ /(url|version|bin\.install)/) {gsub(old, new, $0)};print $0 >"awk.out"}' ./Formula/${formula}.rb;mv awk.out ./Formula/${formula}.rb; }
          export -f update_version
          update_hashs () { if [ ! -f ./Formula/${1}.rb ];then return 0;fi;formula=$1;paste -d ' ' <(pcregrep -o1 'url.*"(.*)"' ./Formula/${formula}.rb) <(pcregrep -o1 'sha256.*"(.*)"' ./Formula/${formula}.rb) | xargs -L1 bash -c 'hash=$(curl -sL --fail $1 | sha256sum | cut -d " " -f 1;test ${PIPESTATUS[0]} -eq 0 || { echo "'${formula}'" >> /tmp/.hashfailf; });sed -ri "s/$2/$hash/g" ./Formula/'${formula}'.rb' bash; }
          export -f update_hashs
          update_versions() { if [ ! -f ./Formula/${1}.rb ];then return 0;fi;if [ -f /tmp/.hashfailf ] && grep -qP '^'$1'$' "/tmp/.hashfailf";then return 0;fi;tmp=$(mktemp); jq '."'$1'" = "'$2'"' versions.json > "$tmp" && mv "$tmp" versions.json; }
          export -f update_versions
          echo "update version"
          echo "$APPS" | jq '.[] | select(.version.outdated) | "update_version \(.formula) \(.version.latest) \(.version.current)"' | xargs -n1 bash -c '$1' bash
          echo "update hashs"
          echo "$APPS" | jq '.[] | select(.version.outdated) | "update_hashs \(.formula)"' | xargs -n1 bash -c '$1' bash
          echo "update versions json"
          echo "$APPS" | jq '.[] | select(.version.outdated) | "update_versions \(.formula) \(.version.latest)"' | xargs -n1 bash -c '$1' bash
          echo "Check failures"
          tmp=$(mktemp);sort -u /tmp/.hashfailf > $tmp;mv $tmp /tmp/.hashfailf
          cat /tmp/.hashfailf | while read formula;do
            echo $formula
            git checkout -- ./Formula/${formula}.rb
          done
      - name: Updates Casks
        env:
          APPS: ${{needs.brew-livecheck.outputs.json-apps}}
        run: |
          sudo apt-get install -y coreutils pcregrep
          brew install jq
          rm -f /tmp/.hashfailc
          touch /tmp/.hashfailc
          update_version () { if [ ! -f ./Casks/${1}.rb ];then return 0;fi;formula=$1;new_version=$2;old_version=$3;awk -v old="$old_version" -v new="$new_version" '{if ($0 ~ /(url|version|bin\.install)/) {gsub(old, new, $0)};print $0 >"awk.out"}' ./Casks/${formula}.rb;mv awk.out ./Casks/${formula}.rb; }
          export -f update_version
          update_hashs () { if [ ! -f ./Casks/${1}.rb ];then return 0;fi;formula=$1;paste -d ' ' <(pcregrep -o1 'url.*"(.*)"' ./Casks/${formula}.rb) <(pcregrep -o1 'sha256.*"(.*)"' ./Casks/${formula}.rb) | xargs -L1 bash -c 'hash=$(curl -sL --fail $1 | sha256sum | cut -d " " -f 1;test ${PIPESTATUS[0]} -eq 0 || { echo "'${formula}'" >> /tmp/.hashfailc; });sed -ri "s/$2/$hash/g" ./Casks/'${formula}'.rb' bash; }
          export -f update_hashs
          update_versions() { if [ ! -f ./Casks/${1}.rb ];then return 0;fi;if [ -f /tmp/.hashfailc ] && grep -qP '^'$1'$' "/tmp/.hashfailc";then return 0;fi;tmp=$(mktemp); jq '."'$1'" = "'$2'"' versions.json > "$tmp" && mv "$tmp" versions.json; }
          export -f update_versions
          echo "update version"
          echo "$APPS" | jq '.[] | select(.version.outdated) | "update_version \(.cask) \(.version.latest) \(.version.current)"' | xargs -n1 bash -c '$1' bash
          echo "update hashs"
          echo "$APPS" | jq '.[] | select(.version.outdated) | "update_hashs \(.cask)"' | xargs -n1 bash -c '$1' bash
          echo "update versions json"
          echo "$APPS" | jq '.[] | select(.version.outdated) | "update_versions \(.cask) \(.version.latest)"' | xargs -n1 bash -c '$1' bash
          echo "Check failures"
          tmp=$(mktemp);sort -u /tmp/.hashfailc > $tmp;mv $tmp /tmp/.hashfailc
          cat /tmp/.hashfailc | while read cask;do
            echo $cask
            git checkout -- ./Casks/${cask}.rb
          done
      - name: Push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          file_pattern: '*.rb'
          branch: main
      - name: Push changes versions
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          file_pattern: 'versions.json'
          branch: main
